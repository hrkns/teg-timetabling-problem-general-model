language ESSENCE' 1.0

letting Cant_Actividades be 4
letting Cant_Lapsos be 20
letting Cant_Eventos be 16
letting Cant_Ubicaciones be 3
letting Cant_Curriculos be 2
letting Base_Lapsos_Vetados be Cant_Curriculos + 3
letting Base_Ubicaciones_Vetadas be Cant_Curriculos + 3 + Cant_Lapsos
letting Cant_Cols_Actividades be 6 + Cant_Curriculos + Cant_Ubicaciones + Cant_Lapsos
letting Cant_Cols_Lapsos be 3 + Cant_Actividades
letting Cant_Cols_Ubicaciones be 3 + Cant_Actividades

letting Actividades : matrix indexed by [int(1..Cant_Actividades),int(1..Cant_Cols_Actividades)] of int(0..) be

$1 columna para id de actividad
$2 columnas para marcadores booleanos de curriculos
$1 columna para marcador booleano de doble actividad
$1 columna para cantidad de estudiantes
$20 columnas para marcadores booleanos de lapsos vetados
$3 columnas para marcadores booleanos de ubicaciones vetadas
$1 columna para id de profesor
$1 columna para cantidad minima de dias
$1 columna para cantidad de clases

[ [1, 1, 0, 1, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 3, 3],[2, 1, 0, 0, 42, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 2, 2, 3],[3, 1, 1, 1, 40, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 3, 4, 5],[4, 0, 1, 1, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 4, 5]]

letting Lapsos : matrix indexed by [int(1..Cant_Lapsos),int(1..Cant_Cols_Lapsos)] of int(0..) be

$1 columna para id de lapso
$1 columna para id de dia
$1 columna para id de timeslot
$1 columnas para marcadores booleanos de actividades vetadas

[ [1, 1, 1, 0, 0, 0, 0],[2, 1, 2, 0, 0, 0, 0],[3, 1, 3, 0, 0, 0, 0],[4, 1, 4, 0, 0, 0, 0],[5, 2, 1, 0, 0, 0, 0],[6, 2, 2, 0, 0, 0, 0],[7, 2, 3, 0, 0, 0, 0],[8, 2, 4, 0, 0, 0, 0],[9, 3, 1, 0, 0, 1, 0],[10, 3, 2, 0, 0, 1, 0],[11, 3, 3, 0, 0, 0, 0],[12, 3, 4, 0, 0, 0, 0],[13, 4, 1, 0, 0, 0, 0],[14, 4, 2, 0, 0, 0, 0],[15, 4, 3, 0, 0, 1, 0],[16, 4, 4, 0, 0, 1, 0],[17, 5, 1, 0, 1, 0, 0],[18, 5, 2, 0, 1, 0, 0],[19, 5, 3, 0, 1, 0, 0],[20, 5, 4, 0, 1, 0, 0]]

letting Ubicaciones  : matrix indexed by [int(1..Cant_Ubicaciones),int(1..Cant_Cols_Ubicaciones)] of int(0..) be

$1 columna para id de ubicacion
$1 columna para capacidad
$4 columnas para marcadores booleanos de actividades vetadas
$1 columna para id de edificio

[ [1, 32, 1, 0, 0, 0, 1],[2, 50, 0, 0, 0, 1, 0],[3, 40, 0, 0, 1, 0, 0]]

letting ID be 1
letting INDEX_CURRICULOS be domain int(2..Cant_Curriculos+1)
letting INDEX_EVENTOS be domain int(1..Cant_Eventos)
letting INDEX_ACTIVIDADES be domain int(1..Cant_Actividades)
letting ACTIVIDAD_DE_EVENTO be 2
letting UBICACION_DE_EVENTO be 3
letting LAPSO_DE_EVENTO be 4
letting PROFESOR_DE_ACTIVIDAD be Cant_Curriculos + Cant_Lapsos + Cant_Ubicaciones + 4
letting DIA_DE_LAPSO be 2
letting MULTIPLES_CLASES be Cant_Curriculos + 1
letting CANT_ESTUDIANTES_DE_ACTIVIDAD be 3 + Cant_Curriculos
letting CAPACIDAD_DE_UBICACION be 2
letting EDIFICIO_DE_UBICACION be 3 + Cant_Actividades

letting MAX_CARD_B be xxx
letting MAX_CARD_C be xxx
letting MAX_CARD_D be xxx
letting MAX_CARD_F be xxx
letting MAX_CARD_G be xxx
letting MAX_CARD_H be xxx
letting MAX_CARD_J be xxx
$??
letting MAX_CARD_M be xxx
letting MAX_CARD_N be xxx
$??

letting INDEX_CONSTRAINT_B be domain int(1..MAX_CARD_B)
letting INDEX_CONSTRAINT_C be domain int(1..MAX_CARD_C)
letting INDEX_CONSTRAINT_D be domain int(1..MAX_CARD_D)
letting INDEX_CONSTRAINT_F be domain int(1..MAX_CARD_F)
letting INDEX_CONSTRAINT_G be domain int(1..MAX_CARD_G)
letting INDEX_CONSTRAINT_H be domain int(1..MAX_CARD_H)
letting INDEX_CONSTRAINT_J be domain int(1..MAX_CARD_J)
$??
letting INDEX_CONSTRAINT_M be domain int(1..MAX_CARD_M)
letting INDEX_CONSTRAINT_N be domain int(1..MAX_CARD_N)
$??


find Eventos : matrix indexed by [int(1..Cant_Eventos),int(1..4)] of int(1..30)
find B : matrix indexed by [int(1..MAX_CARD_B), int(1..2)] of int(1..Cant_Eventos)
find C : matrix indexed by [int(1..MAX_CARD_C), int(1..2)] of int(1..Cant_Eventos)
find D : matrix indexed by [int(1..MAX_CARD_D), int(1..2)] of int(1..Cant_Eventos)
find F : matrix indexed by [int(1..MAX_CARD_F), int(1..3)] of int(1..Cant_Eventos)
find G : matrix indexed by [int(1..MAX_CARD_G), int(1..2)] of int(1..Cant_Eventos)
find H : matrix indexed by [int(1..MAX_CARD_H), int(1..2)] of int(1..Cant_Eventos)
find J : matrix indexed by [int(1..MAX_CARD_J), int(1..3)] of int(1..max(Cant_Eventos, Cant_Ubicaciones))
$??
find M : matrix indexed by [int(1..MAX_CARD_M), int(1..4)] of int(1..Cant_Eventos)
find N : matrix indexed by [int(1..MAX_CARD_N), int(1..3)] of int(1..Cant_Eventos)
$??

such that

$restriccion para B
	forAll x : INDEX_CONSTRAINT_B.
	(
		B[x, 1] != B[x, 2]
		/\
		forAll y : INDEX_CONSTRAINT_B.
		(
			y != x
			->
			(
				!(
					B[y, 1] = B[x, 2]
					/\
					B[x, 1] = B[y, 2]
				)
				\/
				(
					B[x, 1] = B[y, 1]
					/\
					B[x, 2] = B[y, 2]
				)
			)
		)
		/\
		Eventos[B[x, 1], LAPSO_DE_EVENTO] = Eventos[B[x, 2], LAPSO_DE_EVENTO]
		/\
		Eventos[B[x, 1], UBICACION_DE_EVENTO] = Eventos[B[x, 2], UBICACION_DE_EVENTO]
	)
,

$***
$restriccion para C
	forAll x : INDEX_CONSTRAINT_C.
	(
		C[x, 1] != C[x, 2]
		/\
		!(
			forAll z : INDEX_ACTIVIDADES.
			(
				forAll w : INDEX_ACTIVIDADES.
				(
					z != w
					->
					!(
						Eventos[C[x, 1], ACTIVIDAD_DE_EVENTO] = z
						/\
						Eventos[C[x, 2], ACTIVIDAD_DE_EVENTO] = w
						/\
						!forAll v : INDEX_CURRICULOS.
						(
							Actividades[z, v] != Actividades[w, v]
							\/
							Actividades[z, v] = 0
						)
					)
				)
			)
		)
		/\
		forAll y : INDEX_CONSTRAINT_C.
		(
			x != y
			->
			!(
				C[y, 1] = C[x, 2]
				/\
				C[x, 1] = C[y, 2]
			)
		)
	)
,

$***
$restriccion para D
	forAll x : INDEX_CONSTRAINT_D.
	(
		D[x, 1] != D[x, 2]
		/\
		!(
			forAll z : INDEX_ACTIVIDADES.
			(
				forAll w : INDEX_ACTIVIDADES.
				(
					z != w
					->
					!(
						Eventos[D[x, 1], ACTIVIDAD_DE_EVENTO] = z
						/\
						Eventos[D[x, 2], ACTIVIDAD_DE_EVENTO] = w
						/\
						Actividades[z, PROFESOR_DE_ACTIVIDAD] = Actividades[z, PROFESOR_DE_ACTIVIDAD]
						/\
						Eventos[D[x, 1], LAPSO_DE_EVENTO] = Eventos[D[x, 1], LAPSO_DE_EVENTO]
					)
				)
			)
		)
		/\
		forAll y : INDEX_CONSTRAINT_D.
		(
			x != y
			->
			!(
				D[y, 1] = D[x, 2]
				/\
				D[x, 1] = D[y, 2]
			)
		)
	)
,

$restriccion para F
	forAll x : INDEX_CONSTRAINT_F.
	(
		F[x, 1] != F[x, 2]
		/\
		Eventos[F[x, 1], ACTIVIDAD_DE_EVENTO] = Eventos[F[x, 2], ACTIVIDAD_DE_EVENTO]
		/\
		Eventos[F[x, 1], LAPSO_DE_EVENTO] != Eventos[F[x, 2], LAPSO_DE_EVENTO]
		/\
		Lapsos[Eventos[F[x, 1], LAPSO_DE_EVENTO], DIA_DE_LAPSO] = Lapsos[Eventos[F[x, 2], LAPSO_DE_EVENTO], DIA_DE_LAPSO]
		/\
		Eventos[F[x, 1], ACTIVIDAD_DE_EVENTO] = F[x, 3]
		/\
		Actividades[F[x, 3], MULTIPLES_CLASES] = 0
		/\
		forAll y : INDEX_CONSTRAINT_F.
		(
			x != y
			->
			!(
				F[y, 1] = F[x, 2]
				/\
				F[x, 1] = F[y, 2]
			)
		)
	)
,

$restriccion para G
	forAll x : INDEX_CONSTRAINT_G.
	(
		Eventos[G[x, 1], ACTIVIDAD_DE_EVENTO] = G[x, 2]
		/\
		Actividades[G[x, 2], Base_Lapsos_Vetados + Eventos[G[x, 1], LAPSO_DE_EVENTO]] = 0
		/\
		forAll y : INDEX_CONSTRAINT_G.
		(
			x != y
			->
			(
				G[y, 1] != G[x, 1]
				/\
				G[y, 2] != G[x, 2]
			)
		)
	)
,

$restriccion para H
	forAll x : INDEX_CONSTRAINT_H.
	(
		Eventos[H[x, 1], ACTIVIDAD_DE_EVENTO] = H[x, 2]
		/\
		Actividades[H[x, 2], Base_Ubicaciones_Vetadas + Eventos[H[x, 1], UBICACION_DE_EVENTO]] = 0
		/\
		forAll y : INDEX_CONSTRAINT_H.
		(
			x != y
			->
			(
				H[y, 1] != H[x, 1]
				/\
				H[y, 2] != H[x, 2]
			)
		)
	)
,

$restriccion para J
	forAll x : INDEX_CONSTRAINT_J.
	(
		Eventos[J[x, 1], ACTIVIDAD_DE_EVENTO] = J[x, 2]
		/\
		Eventos[J[x, 1], UBICACION_DE_EVENTO] = J[x, 3]
		/\
		Actividades[J[x, 2], CANT_ESTUDIANTES_DE_ACTIVIDAD] > Ubicaciones[J[x, 3], CAPACIDAD_DE_UBICACION]
		/\
		forAll y : INDEX_CONSTRAINT_H.
		(
			x != y
			->
			(
				J[y, 1] != J[x, 1]
				/\
				J[y, 2] != J[x, 2]
				/\
				J[y, 3] != J[x, 3]
			)
		)
	)
,

$restriccion para K, NO SE FORMULARLA
$,

$restriccion para M
	forAll x : INDEX_CONSTRAINT_M.
	(
		Eventos[M[x, 1], ACTIVIDAD_DE_EVENTO] = M[x, 3]
		/\
		Eventos[M[x, 2], ACTIVIDAD_DE_EVENTO] = M[x, 4]
		/\
		!forAll v : INDEX_CURRICULOS.
		(
			Actividades[M[x, 3], v] != Actividades[M[x, 4], v]
			\/
			Actividades[z, v] = 0
		)
		/\
		!(
			Lapsos[Eventos[M[x, 1], LAPSO_DE_EVENTO], DIA_DE_LAPSO] != Lapsos[Eventos[M[x, 2], LAPSO_DE_EVENTO], DIA_DE_LAPSO]
			\/
			(
				Lapsos[Eventos[M[x, 1], LAPSO_DE_EVENTO], 1] - Lapsos[Eventos[M[x, 2], LAPSO_DE_EVENTO], 1] != 1
				/\
				Lapsos[Eventos[M[x, 2], LAPSO_DE_EVENTO], 1] - Lapsos[Eventos[M[x, 1], LAPSO_DE_EVENTO], 1] != 1
			)
		)
	)
,

$restriccion para N
	forAll x : INDEX_CONSTRAINT_M.
	(
		M[x, 1] != M[x, 2]
		/\
		Eventos[M[x, 1], ACTIVIDAD_DE_EVENTO] = Eventos[M[x, 2], ACTIVIDAD_DE_EVENTO]
		/\
		Eventos[M[x, 1], ACTIVIDAD_DE_EVENTO] = M[x, 3]
		/\
		Eventos[M[x, 1], UBICACION_DE_EVENTO] != Eventos[M[x, 2], UBICACION_DE_EVENTO]
		/\
		forAll y : INDEX_CONSTRAINT_M.
		(
			x != y
			->
			(
				M[y, 1] != M[x, 1]
				/\
				M[y, 2] != M[x, 2]
				/\
				M[y, 3] != M[x, 3]
			)
		)
	)
$,

$restriccion para O, NO SE FORMULARLA
